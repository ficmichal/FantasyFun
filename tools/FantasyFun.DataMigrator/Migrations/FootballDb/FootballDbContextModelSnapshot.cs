// <auto-generated />
using System;
using FantasyFun.DataMigrator.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyFun.DataMigrator.Migrations.FootballDb
{
    [DbContext(typeof(FootballDbContext))]
    partial class FootballDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("FantasyFun.DataMigrator.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("FantasyFun.DataMigrator.Models.League", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("CountryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("League", (string)null);
                });

            modelBuilder.Entity("FantasyFun.DataMigrator.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ApiId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("player_api_id");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT")
                        .HasColumnName("birthday");

                    b.Property<int>("FifaApiId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("player_fifa_api_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("player_name");

                    b.HasKey("Id");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("FantasyFun.DataMigrator.Models.Player_Attribute", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ApiId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("player_api_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<int>("FifaApiId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("player_fifa_api_id");

                    b.Property<long>("OverallRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("overall_rating");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.ToTable("Player_Attributes", (string)null);
                });

            modelBuilder.Entity("FantasyFun.DataMigrator.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("ApiId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("team_api_id");

                    b.Property<long?>("FifaApiId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("team_fifa_api_id");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("team_long_name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("team_short_name");

                    b.HasKey("Id");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("FantasyFun.DataMigrator.Models.League", b =>
                {
                    b.HasOne("FantasyFun.DataMigrator.Models.Country", "Country")
                        .WithMany("Leagues")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FantasyFun.DataMigrator.Models.Player_Attribute", b =>
                {
                    b.HasOne("FantasyFun.DataMigrator.Models.Player", "Player")
                        .WithMany("Players")
                        .HasForeignKey("ApiId")
                        .HasPrincipalKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyFun.DataMigrator.Models.Country", b =>
                {
                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("FantasyFun.DataMigrator.Models.Player", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
